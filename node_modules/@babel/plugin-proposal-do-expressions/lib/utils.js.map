{"version":3,"names":["wrapDoExpressionInIIFE","path","state","break","Set","continue","found","traverse","DoExpression","body","node","length","replaceExpressionWithStatements","replaceWith","scope","buildUndefinedNode","FunctionParent","skip","Loop","add","LabeledStatement","name","label","BreakStatement","_path$node$label$name","_path$node$label","has","throwError","ContinueStatement","_path$node$label$name2","_path$node$label2","ReturnStatement","buildCodeFrameError"],"sources":["../src/utils.ts"],"sourcesContent":["import type { NodePath } from \"@babel/core\";\n\n// Wrap all do expressions in an IIFE.\n// This doesn't work with control flow statements like break/continue/return.\n// Only use this when the code is too hard to transform.\nexport function wrapDoExpressionInIIFE(path: NodePath) {\n  const state = {\n    break: new Set<string | null>(),\n    continue: new Set<string | null>(),\n    found: false,\n  };\n  path.traverse({\n    DoExpression(path) {\n      const body = path.node.body.body;\n      if (body.length) {\n        path.replaceExpressionWithStatements(body);\n      } else {\n        path.replaceWith(path.scope.buildUndefinedNode());\n      }\n    },\n    FunctionParent(path) {\n      path.skip();\n    },\n    Loop() {\n      state.break.add(null);\n      state.continue.add(null);\n    },\n    LabeledStatement(path) {\n      const name = path.node.label.name;\n      state.break.add(name);\n    },\n    BreakStatement(path) {\n      if (!state.break.has(path.node.label?.name ?? null)) {\n        throwError(path);\n      }\n    },\n    ContinueStatement(path) {\n      if (!state.continue.has(path.node.label?.name ?? null)) {\n        throwError(path);\n      }\n    },\n    ReturnStatement(path) {\n      throwError(path);\n    },\n  });\n\n  function throwError(path: NodePath) {\n    throw path.buildCodeFrameError(\n      \"This control flow escape from do expression is not supported.\",\n    );\n  }\n}\n"],"mappings":";;;;;;AAKO,SAASA,sBAAsBA,CAACC,IAAc,EAAE;EACrD,MAAMC,KAAK,GAAG;IACZC,KAAK,EAAE,IAAIC,GAAG,CAAgB,CAAC;IAC/BC,QAAQ,EAAE,IAAID,GAAG,CAAgB,CAAC;IAClCE,KAAK,EAAE;EACT,CAAC;EACDL,IAAI,CAACM,QAAQ,CAAC;IACZC,YAAYA,CAACP,IAAI,EAAE;MACjB,MAAMQ,IAAI,GAAGR,IAAI,CAACS,IAAI,CAACD,IAAI,CAACA,IAAI;MAChC,IAAIA,IAAI,CAACE,MAAM,EAAE;QACfV,IAAI,CAACW,+BAA+B,CAACH,IAAI,CAAC;MAC5C,CAAC,MAAM;QACLR,IAAI,CAACY,WAAW,CAACZ,IAAI,CAACa,KAAK,CAACC,kBAAkB,CAAC,CAAC,CAAC;MACnD;IACF,CAAC;IACDC,cAAcA,CAACf,IAAI,EAAE;MACnBA,IAAI,CAACgB,IAAI,CAAC,CAAC;IACb,CAAC;IACDC,IAAIA,CAAA,EAAG;MACLhB,KAAK,CAACC,KAAK,CAACgB,GAAG,CAAC,IAAI,CAAC;MACrBjB,KAAK,CAACG,QAAQ,CAACc,GAAG,CAAC,IAAI,CAAC;IAC1B,CAAC;IACDC,gBAAgBA,CAACnB,IAAI,EAAE;MACrB,MAAMoB,IAAI,GAAGpB,IAAI,CAACS,IAAI,CAACY,KAAK,CAACD,IAAI;MACjCnB,KAAK,CAACC,KAAK,CAACgB,GAAG,CAACE,IAAI,CAAC;IACvB,CAAC;IACDE,cAAcA,CAACtB,IAAI,EAAE;MAAA,IAAAuB,qBAAA,EAAAC,gBAAA;MACnB,IAAI,CAACvB,KAAK,CAACC,KAAK,CAACuB,GAAG,EAAAF,qBAAA,IAAAC,gBAAA,GAACxB,IAAI,CAACS,IAAI,CAACY,KAAK,qBAAfG,gBAAA,CAAiBJ,IAAI,YAAAG,qBAAA,GAAI,IAAI,CAAC,EAAE;QACnDG,UAAU,CAAC1B,IAAI,CAAC;MAClB;IACF,CAAC;IACD2B,iBAAiBA,CAAC3B,IAAI,EAAE;MAAA,IAAA4B,sBAAA,EAAAC,iBAAA;MACtB,IAAI,CAAC5B,KAAK,CAACG,QAAQ,CAACqB,GAAG,EAAAG,sBAAA,IAAAC,iBAAA,GAAC7B,IAAI,CAACS,IAAI,CAACY,KAAK,qBAAfQ,iBAAA,CAAiBT,IAAI,YAAAQ,sBAAA,GAAI,IAAI,CAAC,EAAE;QACtDF,UAAU,CAAC1B,IAAI,CAAC;MAClB;IACF,CAAC;IACD8B,eAAeA,CAAC9B,IAAI,EAAE;MACpB0B,UAAU,CAAC1B,IAAI,CAAC;IAClB;EACF,CAAC,CAAC;EAEF,SAAS0B,UAAUA,CAAC1B,IAAc,EAAE;IAClC,MAAMA,IAAI,CAAC+B,mBAAmB,CAC5B,+DACF,CAAC;EACH;AACF","ignoreList":[]}